import sqlite3
from connection import get_db_connection, create_table
from clas_funct import FlightCalculator, Airplane, Airport, get_all_planes, load_data_to_calculator, row_to_dict, get_all_airports


create_table()
calculator = FlightCalculator()
load_data_to_calculator(calculator)


while True:
    print("=" * 50)
    print("üõ´ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ü–û–õ–¨–û–¢–ê–ú–ò üõ¨")
    print("=" * 50)
    print("1Ô∏è‚É£  –î–æ–¥–∞—Ç–∏ –∞–µ—Ä–æ–ø–æ—Ä—Ç")
    print("2Ô∏è‚É£  –î–æ–¥–∞—Ç–∏ –ª—ñ—Ç–∞–∫")
    print("3Ô∏è‚É£  –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–ø–∏—Å–æ–∫ –ª—ñ—Ç–∞–∫—ñ–≤")
    print("4Ô∏è‚É£  –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–ø–∏—Å–æ–∫ –∞–µ—Ä–æ–ø–æ—Ä—Ç—ñ–≤")
    print("5Ô∏è‚É£  –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–ª—å–æ—Ç—É")
    print("6Ô∏è‚É£  –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ä–æ–±–æ—Ç—É")
    print("=" * 50)
    
    try:
        choice = input("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-6) >>> ")
        if not choice.isdigit():
            raise ValueError("–í–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ —î —á–∏—Å–ª–æ–º")
        choice = int(choice)
        if choice < 1 or choice > 6:
            raise ValueError("–ß–∏—Å–ª–æ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 6")
            

        if choice == 6:
            print("\nüëã –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏!")
            break
            

        elif choice == 5:
            print("\nüìä –†–û–ó–†–ê–•–£–ù–û–ö –ü–û–õ–¨–û–¢–£")
            print("-" * 30)
            airplane_name = input("‚úàÔ∏è  –ù–∞–∑–≤–∞ –ª—ñ—Ç–∞–∫–∞ >>> ")
            distance = float(input("üìè –î–∏—Å—Ç–∞–Ω—Ü—ñ—è (–∫–º) >>> "))
            passengers = int(input("üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Å–∞–∂–∏—Ä—ñ–≤ >>> "))
            departure_airport_name = input("üõ´ –ê–µ—Ä–æ–ø–æ—Ä—Ç –≤–∏–ª—å–æ—Ç—É >>> ")
            result = calculator.calculate_flight(airplane_name, distance, passengers, departure_airport_name)
            print(result)


        elif choice == 4:
            print("\nüìç –°–ü–ò–°–û–ö –ê–ï–†–û–ü–û–†–¢–Ü–í")
            print("-" * 30)
            airports = get_all_airports()
            for airport in airports:
                airport_data = row_to_dict(airport)
                print(f"üè¢ –ù–∞–∑–≤–∞: {airport_data['name']}")
                print(f"üìè –î–æ–≤–∂–∏–Ω–∞ –ó–ü–°: {airport_data['runway_length']} –º")
                print("-" * 30)


        elif choice == 3:
            print("\n‚úàÔ∏è  –°–ü–ò–°–û–ö –õ–Ü–¢–ê–ö–Ü–í")
            print("-" * 30)
            planes = get_all_planes()
            for plane in planes:
                plane_data = row_to_dict(plane)
                print(f"üìù –ù–∞–∑–≤–∞: {plane_data['name']}")
                print(f"‚öñÔ∏è  –ë–∞–∑–æ–≤–∞ –≤–∞–≥–∞: {plane_data['base_weight']} —Ç–æ–Ω–Ω")
                print(f"‚õΩÔ∏è –ü–∞–ª–∏–≤–æ/–∫–º: {plane_data['fuel_per_km']} —Ç–æ–Ω–Ω")
                print(f"üìè –ü–æ—Ç—Ä—ñ–±–Ω–∞ –ó–ü–°: {plane_data['runway_length']} –º")
                print(f"üç± –á–∂–∞/–ø–∞—Å–∞–∂–∏—Ä: {plane_data['food_per_passenger']} —Ç–æ–Ω–Ω")
                print("-" * 30)


        elif choice == 2:
            print("\n‚úàÔ∏è  –î–û–î–ê–í–ê–ù–ù–Ø –ù–û–í–û–ì–û –õ–Ü–¢–ê–ö–ê")
            print("-" * 30)
            name = input("üìù –ù–∞–∑–≤–∞ –ª—ñ—Ç–∞–∫–∞ >>> ")
            base_weight = float(input("‚öñÔ∏è  –ë–∞–∑–æ–≤–∞ –≤–∞–≥–∞ (—Ç–æ–Ω–Ω) >>> "))
            fuel_per_km = float(input("‚õΩÔ∏è –í–∏—Ç—Ä–∞—Ç–∏ –ø–∞–ª–∏–≤–∞ –Ω–∞ –∫–º >>> "))
            runway_length = float(input("üìè –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –ó–ü–° >>> "))
            food_per_passenger = float(input("üç± –á–∂–∞ –Ω–∞ –ø–∞—Å–∞–∂–∏—Ä–∞ >>> "))

            try:
                connection = get_db_connection()
                insert_query = """
                INSERT INTO airplane
                (name, base_weight, fuel_per_km, runway_length, food_per_passenger)
                VALUES (?, ?, ?, ?, ?);"""
                connection.execute(insert_query, (name, base_weight, fuel_per_km, runway_length, food_per_passenger)) 
                connection.commit()
                calculator.add_airplane(Airplane(name, base_weight, fuel_per_km, runway_length, food_per_passenger))
                print("\n‚úÖ –ù–æ–≤–∏–π –ª—ñ—Ç–∞–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")

            except sqlite3.IntegrityError:
                print("\n‚ùå –ü–æ–º–∏–ª–∫–∞: –ª—ñ—Ç–∞–∫ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.")
            except sqlite3.Error as error:
                print("\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö:", error)
            finally:
                if connection:
                    connection.close()


        elif choice == 1:
            print("\nüè¢ –î–û–î–ê–í–ê–ù–ù–Ø –ù–û–í–û–ì–û –ê–ï–†–û–ü–û–†–¢–£")
            print("-" * 30)
            name = input("üìù –ù–∞–∑–≤–∞ –∞–µ—Ä–æ–ø–æ—Ä—Ç—É >>> ")
            runway_length = float(input("üìè –î–æ–≤–∂–∏–Ω–∞ –ó–ü–° (–º) >>> "))

            try:
                connection = get_db_connection()
                insert_query = """
                INSERT INTO airport
                (name, runway_length)
                VALUES (?, ?);"""
                connection.execute(insert_query, (name, runway_length)) 
                connection.commit()
                calculator.add_airport(Airport(name, runway_length))
                print("\n‚úÖ –ù–æ–≤–∏–π –∞–µ—Ä–æ–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")

            except sqlite3.IntegrityError:
                print("\n‚ùå –ü–æ–º–∏–ª–∫–∞: –∞–µ—Ä–æ–ø–æ—Ä—Ç –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.")
            except sqlite3.Error as error:
                print("\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö:", error)
            finally:
                if connection:
                    connection.close()
                    
    except ValueError:
        print("\n‚ùå –ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ!")
